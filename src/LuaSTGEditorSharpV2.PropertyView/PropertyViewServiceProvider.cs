using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using LuaSTGEditorSharpV2.Core;
using LuaSTGEditorSharpV2.Core.Model;
using LuaSTGEditorSharpV2.Core.Services;
using LuaSTGEditorSharpV2.ResourceDictionaryService;
using Microsoft.Extensions.DependencyInjection;

namespace LuaSTGEditorSharpV2.PropertyView
{
    [ServiceName("PropertyView"), ServiceShortName("prop")]
    public class PropertyViewServiceProvider
        : CompactNodeServiceProvider<PropertyViewServiceProvider, PropertyViewServiceBase, PropertyViewContext, PropertyViewServiceSettings>
    {
        private static readonly string _nativeViewI18NKey = "native_view";
        private static readonly string _defaultViewI18NKey = "default_view";

        public string NativeViewI18NCaption => ServiceProvider
            .GetRequiredService<LocalizationService>()
            .GetString(_nativeViewI18NKey, typeof(PropertyViewServiceBase).Assembly);
        public string DefaultViewI18NCaption => ServiceProvider
            .GetRequiredService<LocalizationService>()
            .GetString(_defaultViewI18NKey, typeof(PropertyViewServiceBase).Assembly);

        private readonly PropertyViewServiceBase _defaultService;

        public PropertyViewServiceProvider(IServiceProvider serviceProvider) : base(serviceProvider)
        {
            _defaultService = new(this, serviceProvider);
        }

        protected override PropertyViewServiceBase DefaultService => _defaultService;

        public IReadOnlyList<PropertyTabViewModel> GetPropertyViewModelOfNode(NodeData nodeData
            , LocalServiceParam localParam)
            => GetPropertyViewModelOfNode(nodeData, localParam, ServiceSettings);

        /// <summary>
        /// Obtain a list of <see cref="PropertyTabViewModel"/> according to data source for providing properties to edit. 
        /// </summary>
        /// <param name="nodeData"> The data source. </param>
        /// <param name="localParam"> Th local param for this action. </param>
        /// <param name="serviceSettings"> The <see cref="PropertyViewServiceSettings"/> for this action. </param>
        /// <param name="subtype"></param>
        /// <returns></returns>
        public IReadOnlyList<PropertyTabViewModel> GetPropertyViewModelOfNode(NodeData nodeData
            , LocalServiceParam localParam, PropertyViewServiceSettings serviceSettings)
        {
            var ctx = GetContextOfNode(nodeData, localParam, serviceSettings);
            return GetPropertyViewModelOfNode(nodeData, ctx);
        }

        public IReadOnlyList<PropertyTabViewModel> GetPropertyViewModelOfNode(NodeData nodeData, PropertyViewContext ctx)
        {
            var list = new List<PropertyTabViewModel>();
            list.AddRange(GetServiceOfNode(nodeData).ResolvePropertyViewModelOfNode(nodeData, ctx));
            list.Add(CreateDefaultViewModel(nodeData, ctx));
            return list;
        }

        public EditResult GetCommandOfEditingNode(NodeData nodeData,
            LocalServiceParam localParams, IReadOnlyList<PropertyTabViewModel>? propertyList,
            int tabIndex, int itemIndex, string edited)
            => GetCommandOfEditingNode(nodeData, localParams, ServiceSettings, propertyList
                , tabIndex, itemIndex, edited);

        /// <summary>
        /// Obtain a command which manipulate target <see cref="NodeData"/> by infomation from UI.
        /// </summary>
        /// <param name="nodeData"> The data source. </param>
        /// <param name="propertyList"> 
        /// The <see cref="PropertyItemViewModelBase"/> generated by <see cref="GetPropertyViewModelOfNode"/>. 
        /// </param>
        /// <param name="localParams"> The local params for executing the service. </param>
        /// <param name="tabIndex"> Index of tab in <see cref="PropertyTabViewModel"/>s. </param>
        /// <param name="itemIndex"> Index of item in <see cref="PropertyItemViewModelBase"/>s. </param>
        /// <param name="edited"> The <see cref="string"/> as edit result. </param>
        /// <returns></returns>
        public EditResult GetCommandOfEditingNode(NodeData nodeData,
            LocalServiceParam localParams, PropertyViewServiceSettings serviceSettings,
            IReadOnlyList<PropertyTabViewModel>? propertyList, int tabIndex, int itemIndex,
            string edited)
        {
            if (propertyList != null && tabIndex == propertyList.Count - 1)
                return DefaultService.ResolveNativeEditing(nodeData, propertyList[^1].Properties,
                    itemIndex, edited);
            return GetServiceOfNode(nodeData).ResolveCommandOfEditingNode(nodeData,
                GetContextOfNode(nodeData, localParams, serviceSettings),
                tabIndex, itemIndex, edited);
        }

        private PropertyTabViewModel CreateDefaultViewModel(NodeData nodeData, PropertyViewContext context)
        {
            List<PropertyItemViewModelBase> result = new(nodeData.Properties.Count);
            foreach (var prop in nodeData.Properties)
            {
                result.Add(new BasicPropertyItemViewModel(nodeData, context.LocalParam)
                {
                    Name = prop.Key,
                    Value = prop.Value
                });
            }
            PropertyTabViewModel tab = new()
            {
                Caption = NativeViewI18NCaption
            };
            result.ForEach(tab.Properties.Add);
            return tab;
        }
    }
}
