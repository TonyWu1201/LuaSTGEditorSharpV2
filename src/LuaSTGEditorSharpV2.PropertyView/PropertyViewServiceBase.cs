using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

using LuaSTGEditorSharpV2.Core;
using LuaSTGEditorSharpV2.Core.Command;
using LuaSTGEditorSharpV2.Core.Model;
using LuaSTGEditorSharpV2.ViewModel;

namespace LuaSTGEditorSharpV2.PropertyView
{
    /// <summary>
    /// Provide functionality of presenting and manipulating <see cref="NodeData"/> properties.
    /// </summary>
    [ServiceName("PropertyView"), ServiceShortName("prop")]
    public class PropertyViewServiceBase 
        : NodeService<PropertyViewServiceBase, PropertyViewContext, PropertyViewServiceSettings>
    {
        public static IReadOnlyList<string> ResourceDictUris => _resourceDictUris;

        private static readonly PropertyViewServiceBase _defaultService = new();

        private static readonly List<string> _resourceDictUris = 
            [ "pack://application:,,,/LuaSTGEditorSharpV2.PropertyView;component/PropertyView.xaml" ];

        private static readonly string _nativeViewI18NKey = "native_view";
        private static readonly string _defaultViewI18NKey = "default_view";

        private static string NativeViewI18NCaption => LocalizedResourceHost.GetString(_nativeViewI18NKey
            , typeof(PropertyViewServiceBase).Assembly) ?? "Native_View";
        protected static string DefaultViewI18NCaption => LocalizedResourceHost.GetString(_defaultViewI18NKey
            , typeof(PropertyViewServiceBase).Assembly) ?? "Default_View";

        static PropertyViewServiceBase()
        {
            _defaultServiceGetter = () => _defaultService;
        }

        public static IReadOnlyList<PropertyTabViewModel> GetPropertyViewModelOfNode(NodeData nodeData
            , LocalServiceParam localParam)
            => GetPropertyViewModelOfNode(nodeData, localParam, ServiceSettings);

        /// <summary>
        /// Obtain a list of <see cref="PropertyTabViewModel"/> according to data source for providing properties to edit. 
        /// </summary>
        /// <param name="nodeData"> The data source. </param>
        /// <param name="localParam"> Th local param for this action. </param>
        /// <param name="serviceSettings"> The <see cref="PropertyViewServiceSettings"/> for this action. </param>
        /// <param name="subtype"></param>
        /// <returns></returns>
        public static IReadOnlyList<PropertyTabViewModel> GetPropertyViewModelOfNode(NodeData nodeData
            , LocalServiceParam localParam, PropertyViewServiceSettings serviceSettings)
        {
            var ctx = GetContextOfNode(nodeData, localParam, serviceSettings);
            var list = new List<PropertyTabViewModel>();
            list.AddRange(GetServiceOfNode(nodeData).ResolvePropertyViewModelOfNode(nodeData, ctx));
            list.Add(CreateDefaultViewModel(nodeData));
            return list;
        }

        public static CommandBase GetCommandOfEditingNode(NodeData nodeData,
            LocalServiceParam localParams, IReadOnlyList<PropertyTabViewModel> propertyList, 
            int tabIndex, int itemIndex, string edited)
            => GetCommandOfEditingNode(nodeData, localParams, ServiceSettings, propertyList
                , tabIndex, itemIndex, edited);

        /// <summary>
        /// Obtain a command which manipulate target <see cref="NodeData"/> by infomation from UI.
        /// </summary>
        /// <param name="nodeData"> The data source. </param>
        /// <param name="propertyList"> 
        /// The <see cref="PropertyItemViewModel"/> generated by <see cref="GetPropertyViewModelOfNode"/>. 
        /// </param>
        /// <param name="localParams"> The local params for executing the service. </param>
        /// <param name="tabIndex"> Index of tab in <see cref="PropertyTabViewModel"/>s. </param>
        /// <param name="itemIndex"> Index of item in <see cref="PropertyItemViewModel"/>s. </param>
        /// <param name="edited"> The <see cref="string"/> as edit result. </param>
        /// <returns></returns>
        public static CommandBase GetCommandOfEditingNode(NodeData nodeData, 
            LocalServiceParam localParams, PropertyViewServiceSettings serviceSettings, 
            IReadOnlyList<PropertyTabViewModel> propertyList, int tabIndex, int itemIndex, 
            string edited)
        {
            if (tabIndex == propertyList.Count - 1) 
                return ResolveNativeEditing(nodeData, propertyList, itemIndex, edited);
            var otherProperties = new List<PropertyTabViewModel>(propertyList.Take(propertyList.Count - 1));
            return GetServiceOfNode(nodeData).ResolveCommandOfEditingNode(nodeData, 
                GetContextOfNode(nodeData, localParams, serviceSettings),
                otherProperties, tabIndex, itemIndex, edited);
        }

        private static PropertyTabViewModel CreateDefaultViewModel(NodeData nodeData)
        {
            List<PropertyItemViewModel> result = new(nodeData.Properties.Count);
            foreach (var prop in nodeData.Properties)
            {
                result.Add(new PropertyItemViewModel(prop.Key, prop.Value));
            }
            PropertyTabViewModel tab = new()
            {
                Caption = NativeViewI18NCaption
            };
            result.ForEach(ivm => tab.Properties.Add(ivm));
            return tab;
        }

        public static void AddResourceDictUri(string uri)
        {
            _resourceDictUris.Add(uri);
        }

        public override sealed PropertyViewContext GetEmptyContext(LocalServiceParam localSettings
            , PropertyViewServiceSettings serviceSettings)
        {
            return new PropertyViewContext(localSettings, serviceSettings);
        }

        private static CommandBase ResolveNativeEditing(NodeData nodeData,
            IReadOnlyList<PropertyTabViewModel> propertyList,
            int itemIndex, string edited)
        {
            return EditPropertyCommand.CreateEditCommandOnDemand(nodeData,
                propertyList[^1].Properties[itemIndex].Name, edited);
        }

        /// <summary>
        /// Obtain a list of <see cref="PropertyTabViewModel"/> according to data source with 
        /// same TypeUID for providing properties to edit.
        /// </summary>
        /// <param name="nodeData"> The data source with the same TypeUID. </param>
        /// <returns></returns>
        protected virtual IReadOnlyList<PropertyTabViewModel> ResolvePropertyViewModelOfNode(NodeData nodeData
            , PropertyViewContext context)
        {
            return Array.Empty<PropertyTabViewModel>();
        }

        /// <summary>
        /// Obtain a command which manipulate target <see cref="NodeData"/> with the same TypeUID by infomation from UI.
        /// </summary>
        /// <param name="nodeData"> The data source with the same TypeUID. </param>
        /// <param name="context"> The <see cref="PropertyViewContext"/> of the node. </param>
        /// <param name="propertyList"> 
        /// The <see cref="PropertyTabViewModel"/> generated by <see cref="ResolvePropertyViewModelOfNode"/>. 
        /// </param>
        /// <param name="tabIndex"> Index of tab in <see cref="PropertyTabViewModel"/>s. </param>
        /// <param name="itemIndex"> Index of item in <see cref="PropertyItemViewModel"/>s. </param>
        /// <param name="edited"> The <see cref="string"/> as edit result. </param>
        /// <returns></returns>
        protected virtual CommandBase ResolveCommandOfEditingNode(NodeData nodeData, 
            PropertyViewContext context, IReadOnlyList<PropertyTabViewModel> propertyList, 
            int tabIndex, int itemIndex, string edited)
        {
            if (tabIndex != propertyList.Count - 1) 
                throw new ArgumentException("Default command resolver cannot resolve custom view", nameof(tabIndex));
            return ResolveNativeEditing(nodeData, propertyList, itemIndex, edited);
        }
    }
}
