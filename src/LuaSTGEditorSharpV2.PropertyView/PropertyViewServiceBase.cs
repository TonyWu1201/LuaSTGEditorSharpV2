using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

using LuaSTGEditorSharpV2.Core;
using LuaSTGEditorSharpV2.Core.Command;
using LuaSTGEditorSharpV2.Core.Model;

namespace LuaSTGEditorSharpV2.PropertyView
{
    /// <summary>
    /// Provide functionality of presenting and manipulating <see cref="NodeData"/> properties.
    /// </summary>
    public class PropertyViewServiceBase 
        : CompactNodeService<PropertyViewServiceProvider, PropertyViewServiceBase, PropertyViewContext, PropertyViewServiceSettings>
    {
        public override sealed PropertyViewContext GetEmptyContext(LocalServiceParam localSettings
            , PropertyViewServiceSettings serviceSettings)
        {
            return new PropertyViewContext(localSettings, serviceSettings);
        }

        internal protected static EditResult ResolveNativeEditing(NodeData nodeData,
            IReadOnlyList<PropertyItemViewModelBase> propertyList,
            int itemIndex, string edited)
        {
            return new EditResult(EditPropertyCommand.CreateEditCommandOnDemand(nodeData,
                (propertyList[itemIndex] as BasicPropertyItemViewModel)?.Name, edited));
        }

        /// <summary>
        /// Obtain a list of <see cref="PropertyTabViewModel"/> according to data source with 
        /// same TypeUID for providing properties to edit.
        /// </summary>
        /// <param name="nodeData"> The data source with the same TypeUID. </param>
        /// <returns></returns>
        internal protected virtual IReadOnlyList<PropertyTabViewModel> ResolvePropertyViewModelOfNode(NodeData nodeData
            , PropertyViewContext context)
        {
            return Array.Empty<PropertyTabViewModel>();
        }

        /// <summary>
        /// Obtain a command which manipulate target <see cref="NodeData"/> with the same TypeUID by infomation from UI.
        /// </summary>
        /// <param name="nodeData"> The data source with the same TypeUID. </param>
        /// <param name="context"> The <see cref="PropertyViewContext"/> of the node. </param>
        /// <param name="propertyList"> 
        /// The <see cref="PropertyTabViewModel"/> generated by <see cref="ResolvePropertyViewModelOfNode"/>. 
        /// </param>
        /// <param name="tabIndex"> Index of tab in <see cref="PropertyTabViewModel"/>s. </param>
        /// <param name="itemIndex"> Index of item in <see cref="PropertyItemViewModelBase"/>s. </param>
        /// <param name="edited"> The <see cref="string"/> as edit result. </param>
        /// <returns></returns>
        internal protected virtual EditResult ResolveCommandOfEditingNode(NodeData nodeData, 
            PropertyViewContext context, 
            int tabIndex, int itemIndex, string edited)
        {
            return EditResult.Empty;
        }
    }
}
